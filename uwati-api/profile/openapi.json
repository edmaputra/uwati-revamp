{
  "openapi": "3.0.0",
  "info": {
    "version": "0.0.2",
    "title": "Profile",
    "contact": {
      "name": "Bangun Edma Saputra",
      "email": "bangun.edma.saputra@gmail.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:10010/api/profile/v0",
      "description": "Local Development Server"
    }
  ],
  "paths": {
    "/persons": {
      "get": {
        "summary": "Returns details about a particular person",
        "operationId": "listPerson",
        "tags": [
          "person"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page Number",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Amount of content want to show",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Field/Column name as reference to sort the record",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortAscFlag",
            "in": "query",
            "description": "Direction of sort. Default is Ascending",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Keyword for searching value",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Person with Pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageOfPersonResponse"
                }
              }
            }
          },
          "400": {
            "description": "Client Error with 400 Http status code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientError"
                }
              }
            }
          },
          "404": {
            "description": "Client Error with when Url or Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientError"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new Person",
        "operationId": "createPerson",
        "tags": [
          "person"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Save new person successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponse"
                }
              }
            }
          },
          "400": {
            "description": "Client Error with 400 Http status code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientError"
                }
              }
            }
          },
          "404": {
            "description": "Client Error with when Url or Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientError"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Person",
        "operationId": "updatePerson",
        "tags": [
          "person"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update Person successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponse"
                }
              }
            }
          },
          "400": {
            "description": "Client Error with 400 Http status code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientError"
                }
              }
            }
          },
          "404": {
            "description": "Client Error with when Url or Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientError"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{id}": {
      "get": {
        "summary": "Returns details about a particular person",
        "operationId": "listPerson",
        "tags": [
          "person"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Person Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Person Detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponse"
                }
              }
            }
          },
          "400": {
            "description": "Client Error with 400 Http status code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientError"
                }
              }
            }
          },
          "404": {
            "description": "Client Error with when Url or Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientError"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Person by Its ID",
        "operationId": "updatePerson",
        "tags": [
          "person"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Delete Person successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponse"
                }
              }
            }
          },
          "400": {
            "description": "Client Error with 400 Http status code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientError"
                }
              }
            }
          },
          "404": {
            "description": "Client Error with when Url or Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientError"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PersonCreateRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "address": {
            "type": "object"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "PersonUpdateRequest": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "address": {
            "type": "object"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "IdRequest": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "PersonResponse": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "personId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "address": {
            "type": "object"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "PageOfPersonResponse": {
        "type": "object",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/PersonResponse"
          }
        }
      },
      "ClientError": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "dateTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ServerError": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  }
}
